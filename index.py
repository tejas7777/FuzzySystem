from mpmath import ivimport numpy as np        class TemperatureLinguistic:    universe = np.round(np.arange(35,42.1,0.1),1)    normal = {35:1,38:1,40:0}    hot = {38:0,40:1,42:1}        def normal_membership(self, temp)-> float:        normal = list(self.normal.keys())        if temp < normal[0]:            return 0        if temp < normal[1]:            return 1        if temp > normal[1] and temp < normal[2]:            return (normal[2] - temp) / (normal[2] - normal[1])                    return 0        def hot_membership(self, temp)-> float:         hot = list(self.hot.keys())         if temp < hot[0]:             return 0         if temp < hot[1]:             return (temp - hot[0])/( hot[1] - hot[0])         if temp > hot[1] and temp < hot[2]:             return 1                      return 0            class IntervalFuzzySet:    temperature_universe = np.round(np.arange(35,42.1,0.1),1)    headache_universe = np.arange(0,11,1)    age_universe = np.arange(0,131,1)        Temperature = TemperatureLinguistic()            def __init__(self, temperature:list, headache:list,age:list):        self.temperature = temperature        self.headache = headache        self.age = age                    def temperature_membership(self):        temp1_mf = [ self.Temperature.normal_membership(self.temperature[0]),self.Temperature.hot_membership(self.temperature[0])]        temp2_mf = [ self.Temperature.normal_membership(self.temperature[1]),self.Temperature.hot_membership(self.temperature[1])]                print(temp1_mf, temp2_mf)                print(self.interval_multiplication_util([temp1_mf,temp2_mf]))                    def interval_multiplication_util(self,intervals:list):                mp_intervals = []                for interval in intervals:            sorted_interval = sorted(interval)            mp_intervals.append(iv.mpf(sorted_interval))                    resulting_interval = mp_intervals[0]                for mp_interval in mp_intervals[1:]:            resulting_interval *= mp_interval        return resulting_interval                                                if __name__ == '__main__':    IntervalFuzzySet = IntervalFuzzySet([35,39.2],[0,0],[0,0])    IntervalFuzzySet.temperature_membership()                                                